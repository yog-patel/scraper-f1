"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXataClient = exports.XataClient = void 0;
// Generated by Xata Codegen 0.30.1. Please do not edit.
const client_1 = require("@xata.io/client");
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "bookmarks",
    checkConstraints: {
      bookmarks_xata_id_length_xata_id: {
        name: "bookmarks_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      last_read_chapter_link: {
        name: "last_read_chapter_link",
        columns: ["last_read_chapter"],
        referencedTable: "chapters",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      novel_id_link: {
        name: "novel_id_link",
        columns: ["novel_id"],
        referencedTable: "novels",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_bookmarks_xata_id_key: {
        name: "_pgroll_new_bookmarks_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "last_read_chapter",
        type: "link",
        link: { table: "chapters" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"chapters"}',
      },
      {
        name: "novel_id",
        type: "link",
        link: { table: "novels" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novels"}',
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"users"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "chapter_comments",
    checkConstraints: {
      chapter_comments_xata_id_length_xata_id: {
        name: "chapter_comments_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      chapter_id_link: {
        name: "chapter_id_link",
        columns: ["chapter_id"],
        referencedTable: "chapters",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      parent_comment_id_link: {
        name: "parent_comment_id_link",
        columns: ["parent_comment_id"],
        referencedTable: "chapter_comments",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_chapter_comments_xata_id_key: {
        name: "_pgroll_new_chapter_comments_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "chapter_id",
        type: "link",
        link: { table: "chapters" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"chapters"}',
      },
      {
        name: "parent_comment_id",
        type: "link",
        link: { table: "chapter_comments" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"chapter_comments"}',
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"users"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "chapters",
    checkConstraints: {
      chapters_xata_id_length_xata_id: {
        name: "chapters_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      novel_id_link: {
        name: "novel_id_link",
        columns: ["novel_id"],
        referencedTable: "novels",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_chapters_xata_id_key: {
        name: "_pgroll_new_chapters_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "chapter_number",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "content",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_free",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "novel_id",
        type: "link",
        link: { table: "novels" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novels"}',
      },
      {
        name: "title",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "view_count",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "genres",
    checkConstraints: {
      genres_xata_id_length_xata_id: {
        name: "genres_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_genres_xata_id_key: {
        name: "_pgroll_new_genres_xata_id_key",
        columns: ["xata_id"],
      },
      genres__pgroll_new_name_key: {
        name: "genres__pgroll_new_name_key",
        columns: ["name"],
      },
    },
    columns: [
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "novel_comments",
    checkConstraints: {
      novel_comments_xata_id_length_xata_id: {
        name: "novel_comments_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      novel_id_link: {
        name: "novel_id_link",
        columns: ["novel_id"],
        referencedTable: "novels",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      parent_comment_id_link: {
        name: "parent_comment_id_link",
        columns: ["parent_comment_id"],
        referencedTable: "novel_comments",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_novel_comments_xata_id_key: {
        name: "_pgroll_new_novel_comments_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "content",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "novel_id",
        type: "link",
        link: { table: "novels" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novels"}',
      },
      {
        name: "parent_comment_id",
        type: "link",
        link: { table: "novel_comments" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novel_comments"}',
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"users"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "novel_genres",
    checkConstraints: {
      novel_genres_xata_id_length_xata_id: {
        name: "novel_genres_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      genre_id_link: {
        name: "genre_id_link",
        columns: ["genre_id"],
        referencedTable: "genres",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      novel_id_link: {
        name: "novel_id_link",
        columns: ["novel_id"],
        referencedTable: "novels",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_novel_genres_xata_id_key: {
        name: "_pgroll_new_novel_genres_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "genre_id",
        type: "link",
        link: { table: "genres" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"genres"}',
      },
      {
        name: "novel_id",
        type: "link",
        link: { table: "novels" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novels"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "novel_tags",
    checkConstraints: {
      novel_tags_xata_id_length_xata_id: {
        name: "novel_tags_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      novel_id_link: {
        name: "novel_id_link",
        columns: ["novel_id"],
        referencedTable: "novels",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      tag_id_link: {
        name: "tag_id_link",
        columns: ["tag_id"],
        referencedTable: "tags",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_novel_tags_xata_id_key: {
        name: "_pgroll_new_novel_tags_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "novel_id",
        type: "link",
        link: { table: "novels" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novels"}',
      },
      {
        name: "tag_id",
        type: "link",
        link: { table: "tags" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"tags"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "novels",
    checkConstraints: {
      novels_xata_id_length_xata_id: {
        name: "novels_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_novels_xata_id_key: {
        name: "_pgroll_new_novels_xata_id_key",
        columns: ["xata_id"],
      },
      novels__pgroll_new_slug_key: {
        name: "novels__pgroll_new_slug_key",
        columns: ["slug"],
      },
    },
    columns: [
      {
        name: "author",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "average_rating",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "cover_image_url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_featured",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "language",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "'English'::text",
        comment: "",
      },
      {
        name: "slug",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "status",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "view_count",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "ratings",
    checkConstraints: {
      ratings_xata_id_length_xata_id: {
        name: "ratings_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      novel_id_link: {
        name: "novel_id_link",
        columns: ["novel_id"],
        referencedTable: "novels",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_ratings_xata_id_key: {
        name: "_pgroll_new_ratings_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "novel_id",
        type: "link",
        link: { table: "novels" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"novels"}',
      },
      {
        name: "review",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "score",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"users"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "reading_history",
    checkConstraints: {
      reading_history_xata_id_length_xata_id: {
        name: "reading_history_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      chapter_id_link: {
        name: "chapter_id_link",
        columns: ["chapter_id"],
        referencedTable: "chapters",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_reading_history_xata_id_key: {
        name: "_pgroll_new_reading_history_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "chapter_id",
        type: "link",
        link: { table: "chapters" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"chapters"}',
      },
      {
        name: "progress_percentage",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "read_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"users"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "tags",
    checkConstraints: {
      tags_xata_id_length_xata_id: {
        name: "tags_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_tags_xata_id_key: {
        name: "_pgroll_new_tags_xata_id_key",
        columns: ["xata_id"],
      },
      tags__pgroll_new_name_key: {
        name: "tags__pgroll_new_name_key",
        columns: ["name"],
      },
    },
    columns: [
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "users",
    checkConstraints: {
      users_xata_id_length_xata_id: {
        name: "users_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_users_xata_id_key: {
        name: "_pgroll_new_users_xata_id_key",
        columns: ["xata_id"],
      },
      users__pgroll_new_email_key: {
        name: "users__pgroll_new_email_key",
        columns: ["email"],
      },
      users__pgroll_new_username_key: {
        name: "users__pgroll_new_username_key",
        columns: ["username"],
      },
    },
    columns: [
      {
        name: "avatar_url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "bio",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "display_name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "is_admin",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "password_hash",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "username",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
];
/** @type { import('@xata.io/client').ClientConstructor<{}> } */
const DatabaseClient = (0, client_1.buildClient)();
const defaultOptions = {
  // databaseURL:"https://Infinity-Free-Fire-s-workspace-ntm0uo.us-east-1.xata.sh/db/webnovelvault2",
  databaseURL: process.env.XATA_DATABASE_URL,
  apiKey: process.env.XATA_API_KEY,
  branch: process.env.XATA_BRANCH || "main",
};
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
exports.XataClient = XataClient;
let instance = undefined;
/** @type { () => XataClient } */
const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
exports.getXataClient = getXataClient;
// Add this for CommonJS compatibility:
module.exports = {
  getXataClient,
  XataClient
};
